View(alive_home_range_sizes)
home_range_sizes <- full_join(dead_home_range_sizes, alive_home_range_sizes, by = "deer_id")
View(home_range_sizes)
files_dead
files_alive
library(stringr)
# Function to extract deer ID from filename (assumes it's the number at the end before .csv)
extract_id <- function(filename) {
as.numeric(stringr::str_extract(filename, "(?<=_)\\d+(?=\\.csv$)"))
}
# --- Dead deer files ---
files_dead <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results",
pattern = "home-range-sizes_dead", full.names = TRUE)
# Sort files by extracted deer ID
files_dead <- files_dead[order(sapply(basename(files_dead), extract_id))]
# Read and merge dead deer files
for (i in seq_along(files_dead)) {
d <- as.data.frame(t(read.csv(files_dead[i], header = FALSE)))
if (i == 1) {
dead_home_range_sizes <- d
} else {
dead_home_range_sizes <- full_join(dead_home_range_sizes, d, by = "V1")
}
}
colnames(dead_home_range_sizes) <- c("deer_id", paste0("sim_", 1:20))
# --- Alive deer files ---
files_alive <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results",
pattern = "home-range-sizes_still", full.names = TRUE)
# Sort files by extracted deer ID
files_alive <- files_alive[order(sapply(basename(files_alive), extract_id))]
# Read and merge alive deer files
for (i in seq_along(files_alive)) {
d <- read.csv(files_alive[i], header = FALSE)
if (i == 1) {
alive_home_range_sizes <- d
} else {
alive_home_range_sizes <- full_join(alive_home_range_sizes, d, by = "V1")
}
}
colnames(alive_home_range_sizes) <- c("deer_id", paste0("sim_", 1:20))
View(alive_home_range_sizes)
View(dead_home_range_sizes)
home_range_sizes <- merge(dead_home_range_sizes, alive_home_range_sizes, by = "deer_id")
View(home_range_sizes)
library(stringr)
# Function to extract deer ID from filename (assumes it's the number at the end before .csv)
extract_id <- function(filename) {
as.numeric(stringr::str_extract(filename, "(?<=_)\\d+(?=\\.csv$)"))
}
# --- Dead deer files ---
files_dead <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results",
pattern = "home-range-sizes_dead", full.names = TRUE)
# Sort files by extracted deer ID
files_dead <- files_dead[order(sapply(basename(files_dead), extract_id))]
# Read and merge dead deer files
for (i in seq_along(files_dead)) {
d <- as.data.frame(t(read.csv(files_dead[i], header = FALSE)))
if (i == 1) {
dead_home_range_sizes <- d
} else {
dead_home_range_sizes <- full_join(dead_home_range_sizes, d, by = "V1")
}
}
colnames(dead_home_range_sizes) <- c("deer_id", paste0("sim_", 1:20))
# --- Alive deer files ---
files_alive <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results",
pattern = "home-range-sizes_still", full.names = TRUE)
# Sort files by extracted deer ID
files_alive <- files_alive[order(sapply(basename(files_alive), extract_id))]
# Read and merge alive deer files
for (i in seq_along(files_alive)) {
d <- read.csv(files_alive[i], header = FALSE)
if (i == 1) {
alive_home_range_sizes <- d
} else {
alive_home_range_sizes <- full_join(alive_home_range_sizes, d, by = "V1")
}
}
colnames(alive_home_range_sizes) <- c("deer_id", paste0("sim_", 1:20))
View(dead_home_range_sizes)
home_range_sizes <- full_join(dead_home_range_sizes, alive_home_range_sizes, by = "deer_id")
View(home_range_sizes)
View(dead_home_range_sizes)
View(dead_home_range_sizes)
library(dplyr)
files <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results", pattern = "home-range-sizes_still")
for (i in 1:length(files)) {
if (i == 1) {home_range_sizes <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results/", files[i]), header = F)
} else {
d <-read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results/", files[i]), header = F)
home_range_sizes <- full_join(home_range_sizes, d, by = "V1")
}
}
colnames(home_range_sizes) <- c("deer_id", "sim_1","sim_2", "sim_3", "sim_4", "sim_5", "sim_6", "sim_7", "sim_8", "sim_9", "sim_10", "sim_11","sim_12", "sim_13", "sim_14", "sim_15", "sim_16", "sim_17", "sim_18", "sim_19", "sim_20")
mean_HR_by_sim <- t(as.data.frame(colMeans(home_range_sizes[,-1], na.rm = TRUE)))
sd_HR_by_sim <- t(as.data.frame(apply(home_range_sizes[,-1], na.rm = TRUE, 2, sd))) # 2 = columns
alive_HR_by_sim <- rbind(mean_HR_by_sim, sd_HR_by_sim)
colnames(alive_HR_by_sim) <- c("sim_1","sim_2", "sim_3", "sim_4", "sim_5", "sim_6", "sim_7", "sim_8", "sim_9", "sim_10", "sim_11","sim_12", "sim_13", "sim_14", "sim_15", "sim_16", "sim_17", "sim_18", "sim_19", "sim_20")
row.names(alive_HR_by_sim) <- c("mean_HR_size_ha", "sd_HR_size_ha")
View(home_range_sizes)
library(dplyr)
files <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results", pattern = "home-range-sizes_still")
for (i in 1:length(files)) {
if (i == 1) {home_range_sizes <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results/", files[i]), header = F)
} else {
d <-read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results/", files[i]), header = F)
home_range_sizes <- full_join(home_range_sizes, d, by = "V1")
}
}
colnames(home_range_sizes) <- c("deer_id", "sim_1","sim_2", "sim_3", "sim_4", "sim_5", "sim_6", "sim_7", "sim_8", "sim_9", "sim_10", "sim_11","sim_12", "sim_13", "sim_14", "sim_15", "sim_16", "sim_17", "sim_18", "sim_19", "sim_20")
mean_HR_by_sim <- t(as.data.frame(colMeans(home_range_sizes[,-1], na.rm = TRUE)))
sd_HR_by_sim <- t(as.data.frame(apply(home_range_sizes[,-1], na.rm = TRUE, 2, sd))) # 2 = columns
alive_HR_by_sim <- rbind(mean_HR_by_sim, sd_HR_by_sim)
colnames(alive_HR_by_sim) <- c("sim_1","sim_2", "sim_3", "sim_4", "sim_5", "sim_6", "sim_7", "sim_8", "sim_9", "sim_10", "sim_11","sim_12", "sim_13", "sim_14", "sim_15", "sim_16", "sim_17", "sim_18", "sim_19", "sim_20")
row.names(alive_HR_by_sim) <- c("mean_HR_size_ha", "sd_HR_size_ha")
means <- rowMeans(alive_HR_by_sim)
View(home_range_sizes)
library(dplyr)
files <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results", pattern = "home-range-sizes_dead")
for (i in 1:length(files)) {
if (i == 1) {home_range_sizes <- as.data.frame(t(read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results/", files[i]), header = F)))
} else {
d <- as.data.frame(t(read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results/", files[i]), header = F)))
home_range_sizes <- full_join(home_range_sizes, d, by = "V1")
}
}
colnames(home_range_sizes) <- c("deer_id", "sim_1","sim_2", "sim_3", "sim_4", "sim_5", "sim_6", "sim_7", "sim_8", "sim_9", "sim_10", "sim_11","sim_12", "sim_13", "sim_14", "sim_15", "sim_16", "sim_17", "sim_18", "sim_19", "sim_20")
View(home_range_sizes)
library(dplyr)
files <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results", pattern = "home-range-sizes_still")
library(dplyr)
files <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results", pattern = "home-range-sizes_dead")
library(dplyr)
files <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results", pattern = "home-range-sizes_still")
for (i in 1:length(files)) {
if (i == 1) {home_range_sizes <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results/", files[i]), header = F)
} else {
d <-read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results/", files[i]), header = F)
home_range_sizes <- full_join(home_range_sizes, d, by = "V1")
}
}
colnames(home_range_sizes) <- c("deer_id", "sim_1","sim_2", "sim_3", "sim_4", "sim_5", "sim_6", "sim_7", "sim_8", "sim_9", "sim_10", "sim_11","sim_12", "sim_13", "sim_14", "sim_15", "sim_16", "sim_17", "sim_18", "sim_19", "sim_20")
mean_HR_by_sim <- t(as.data.frame(colMeans(home_range_sizes[,-1], na.rm = TRUE)))
sd_HR_by_sim <- t(as.data.frame(apply(home_range_sizes[,-1], na.rm = TRUE, 2, sd))) # 2 = columns
alive_HR_by_sim <- rbind(mean_HR_by_sim, sd_HR_by_sim)
colnames(alive_HR_by_sim) <- c("sim_1","sim_2", "sim_3", "sim_4", "sim_5", "sim_6", "sim_7", "sim_8", "sim_9", "sim_10", "sim_11","sim_12", "sim_13", "sim_14", "sim_15", "sim_16", "sim_17", "sim_18", "sim_19", "sim_20")
row.names(alive_HR_by_sim) <- c("mean_HR_size_ha", "sd_HR_size_ha")
means <- rowMeans(alive_HR_by_sim)
means
View(alive_HR_by_sim)
### Function to extract sim IDs
extract_id <- function(filename) {
as.numeric(stringr::str_extract(filename, "(?<=_)\\d+(?=\\.csv$)"))
}
library(dplyr)
library(stringr)
### Function to extract sim IDs
extract_id <- function(filename) {
as.numeric(stringr::str_extract(filename, "(?<=_)\\d+(?=\\.csv$)"))
}
files <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results",
pattern = "home-range-sizes_still", full.names = TRUE)
# Sort files by extracted deer ID
files <- files[order(sapply(basename(files), extract_id))]
# Read and merge alive deer files
for (i in seq_along(files)) {
d <- read.csv(files[i], header = FALSE)
if (i == 1) {
alive_home_range_sizes <- d
} else {
alive_home_range_sizes <- full_join(alive_home_range_sizes, d, by = "V1")
}
}
colnames(alive_home_range_sizes) <- c("deer_id", paste0("sim_", 1:20))
View(alive_home_range_sizes)
mean_HR_by_sim <- t(as.data.frame(colMeans(home_range_sizes[,-1], na.rm = TRUE)))
sd_HR_by_sim <- t(as.data.frame(apply(home_range_sizes[,-1], na.rm = TRUE, 2, sd))) # 2 = columns
alive_HR_by_sim <- rbind(mean_HR_by_sim, sd_HR_by_sim)
colnames(alive_HR_by_sim) <- c("sim_1","sim_2", "sim_3", "sim_4", "sim_5", "sim_6", "sim_7", "sim_8", "sim_9", "sim_10", "sim_11","sim_12", "sim_13", "sim_14", "sim_15", "sim_16", "sim_17", "sim_18", "sim_19", "sim_20")
row.names(alive_HR_by_sim) <- c("mean_HR_size_ha", "sd_HR_size_ha")
means <- rowMeans(alive_HR_by_sim)
View(alive_home_range_sizes)
View(alive_HR_by_sim)
library(dplyr)
library(stringr)
library(dplyr)
library(stringr)
### Function to extract sim IDs
extract_id <- function(filename) {
as.numeric(stringr::str_extract(filename, "(?<=_)\\d+(?=\\.csv$)"))
}
files <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results",
pattern = "home-range-sizes_still", full.names = TRUE)
# Sort files by extracted deer ID
files <- files[order(sapply(basename(files), extract_id))]
files <- list.files(path = "~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/Results",
pattern = "home-range-sizes_still", full.names = TRUE)
# Sort files by extracted deer ID
files <- files[order(sapply(basename(files), extract_id))]
# Read and merge alive deer files
for (i in seq_along(files)) {
d <- read.csv(files[i], header = FALSE)
if (i == 1) {
alive_home_range_sizes <- d
} else {
alive_home_range_sizes <- full_join(alive_home_range_sizes, d, by = "V1")
}
}
View(alive_home_range_sizes)
colnames(alive_home_range_sizes) <- c("deer_id", paste0("sim_", 1:20))
mean_HR_by_sim <- t(as.data.frame(colMeans(home_range_sizes[,-1], na.rm = TRUE)))
mean_HR_by_sim <- t(as.data.frame(colMeans(alive_home_range_sizes[,-1], na.rm = TRUE)))
sd_HR_by_sim <- t(as.data.frame(apply(alive_home_range_sizes[,-1], na.rm = TRUE, 2, sd))) # 2 = columns
alive_HR_by_sim <- rbind(mean_HR_by_sim, sd_HR_by_sim)
colnames(alive_HR_by_sim) <- c("sim_1","sim_2", "sim_3", "sim_4", "sim_5", "sim_6", "sim_7", "sim_8", "sim_9", "sim_10", "sim_11","sim_12", "sim_13", "sim_14", "sim_15", "sim_16", "sim_17", "sim_18", "sim_19", "sim_20")
row.names(alive_HR_by_sim) <- c("mean_HR_size_ha", "sd_HR_size_ha")
View(alive_home_range_sizes)
means <- rowMeans(alive_HR_by_sim)
View(alive_HR_by_sim)
means
setwd("~/Corsica deer/corsica_deer_ABM/Manuscript/Tables and figures")
years <- c(2020, 2025, 2030, 2035, 2040)
measure <-  "cumulative_visits"   #"extent" "cumulative_visits"
for (year in years) {
test_rasters <- rasters_by_year[[as.character(year)]]
for (i in 1:length(test_rasters)) {
if (i == 1) { min_raster <- test_rasters[[i]] }
if (i == 1) { max_raster <- test_rasters[[i]] }
if (i == 1) { max_raster_value <- max(test_rasters[[i]]) }
if (measure == "extent") {
#minimum extent
if ( global(test_rasters[[i]] > 0, "sum", na.rm = TRUE) < global(min_raster > 0, "sum", na.rm = TRUE) ) {
min_raster <- test_rasters[[i]]
#print("min raster updated")
}
#maximum extent
if ( global(test_rasters[[i]] > 0, "sum", na.rm = TRUE) > global(max_raster > 0, "sum", na.rm = TRUE) ) {
max_raster <- test_rasters[[i]]
#print("max raster updated")
}
}
if (measure == "cumulative_visits") {
#minimum visits
if ( global(test_rasters[[i]], "sum", na.rm = TRUE) < global(min_raster, "sum", na.rm = TRUE) ) {
min_raster <- test_rasters[[i]]
#print("min raster updated")
}
#maximum visits
if ( global(test_rasters[[i]], "sum", na.rm = TRUE) > global(max_raster, "sum", na.rm = TRUE) ) {
max_raster <- test_rasters[[i]]
print(max(values(test_rasters[[i]]))) # Sense check for me
#print("max raster updated")
}
}
}
assign(paste0("min_raster_", year), min_raster)
assign(paste0("max_raster_", year), max_raster)
}
#### Loading and viewing n-visit raster ####
library(terra)
outline <- vect("~/Corsica deer/corsica_deer_ABM/GIS/Administrative boundaries/corsica_outline.shp")
setwd(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/output_maps"))
load_asc_files_by_year <- function() {
# Mapping from model years to calendar years
year_map <- c("3654" = 2020,
"7306" = 2025,
"10958" = 2030,
"14610" = 2035,
"18264" = 2040)
# List all .asc files
asc_files <- list.files(pattern = "\\.asc$", full.names = TRUE)
# Load each file into a SpatRaster
rasters <- lapply(asc_files, function(f) {
r <- rast(f)
names(r) <- tools::file_path_sans_ext(basename(f)) # Name the raster after the file
r
})
# Extract year from filenames
years <- sapply(asc_files, function(f) {
parts <- strsplit(basename(f), "_")[[1]]
model_year <- tools::file_path_sans_ext(parts[length(parts)])
calendar_year <- year_map[model_year]
as.integer(calendar_year)
})
# Organize rasters into a list by year
rasters_by_year <- split(rasters, years)
return(rasters_by_year)
}
load_asc_files_by_id <- function() {
asc_files <- list.files(pattern = "\\.asc$", full.names = TRUE)
rasters <- lapply(asc_files, function(f) {
r <- rast(f)
names(r) <- tools::file_path_sans_ext(basename(f))
r
})
# Extract ID from filenames
ids <- sapply(asc_files, function(f) {
parts <- strsplit(basename(f), "_")[[1]]
id <- parts[2]  # ID is the second element: "n-visits_ID_ticks_year"
id
})
# Organize rasters into a list by ID
rasters_by_id <- split(rasters, ids)
return(rasters_by_id)
}
rasters_by_year <- load_asc_files_by_year()
rasters_by_id <- load_asc_files_by_id()
setwd("~/Corsica deer/corsica_deer_ABM/Manuscript/Tables and figures")
years <- c(2020, 2025, 2030, 2035, 2040)
measure <-  "cumulative_visits"   #"extent" "cumulative_visits"
for (year in years) {
test_rasters <- rasters_by_year[[as.character(year)]]
for (i in 1:length(test_rasters)) {
if (i == 1) { min_raster <- test_rasters[[i]] }
if (i == 1) { max_raster <- test_rasters[[i]] }
if (i == 1) { max_raster_value <- max(test_rasters[[i]]) }
if (measure == "extent") {
#minimum extent
if ( global(test_rasters[[i]] > 0, "sum", na.rm = TRUE) < global(min_raster > 0, "sum", na.rm = TRUE) ) {
min_raster <- test_rasters[[i]]
#print("min raster updated")
}
#maximum extent
if ( global(test_rasters[[i]] > 0, "sum", na.rm = TRUE) > global(max_raster > 0, "sum", na.rm = TRUE) ) {
max_raster <- test_rasters[[i]]
#print("max raster updated")
}
}
if (measure == "cumulative_visits") {
#minimum visits
if ( global(test_rasters[[i]], "sum", na.rm = TRUE) < global(min_raster, "sum", na.rm = TRUE) ) {
min_raster <- test_rasters[[i]]
#print("min raster updated")
}
#maximum visits
if ( global(test_rasters[[i]], "sum", na.rm = TRUE) > global(max_raster, "sum", na.rm = TRUE) ) {
max_raster <- test_rasters[[i]]
print(max(values(test_rasters[[i]]))) # Sense check for me
#print("max raster updated")
}
}
}
assign(paste0("min_raster_", year), min_raster)
assign(paste0("max_raster_", year), max_raster)
}
setwd("~/Corsica deer/corsica_deer_ABM/Manuscript/Tables and figures")
years <- c(2020, 2025, 2030, 2035, 2040)
measure <-  "cumulative_visits"   #"extent" "cumulative_visits"
for (year in years) {
test_rasters <- rasters_by_year[[as.character(year)]]
for (i in 1:length(test_rasters)) {
if (i == 1) { min_raster <- test_rasters[[i]] }
if (i == 1) { max_raster <- test_rasters[[i]] }
if (i == 1) { max_raster_value <- max(test_rasters[[i]]) }
if (measure == "extent") {
#minimum extent
if ( global(test_rasters[[i]] > 0, "sum", na.rm = TRUE) < global(min_raster > 0, "sum", na.rm = TRUE) ) {
min_raster <- test_rasters[[i]]
#print("min raster updated")
}
#maximum extent
if ( global(test_rasters[[i]] > 0, "sum", na.rm = TRUE) > global(max_raster > 0, "sum", na.rm = TRUE) ) {
max_raster <- test_rasters[[i]]
#print("max raster updated")
}
}
if (measure == "cumulative_visits") {
print(max(values(test_rasters[[i]]))) # Sense check for me
#minimum visits
if ( global(test_rasters[[i]], "sum", na.rm = TRUE) < global(min_raster, "sum", na.rm = TRUE) ) {
min_raster <- test_rasters[[i]]
#print("min raster updated")
}
#maximum visits
if ( global(test_rasters[[i]], "sum", na.rm = TRUE) > global(max_raster, "sum", na.rm = TRUE) ) {
max_raster <- test_rasters[[i]]
print(max(values(test_rasters[[i]]))) # Sense check for me
#print("max raster updated")
}
}
}
assign(paste0("min_raster_", year), min_raster)
assign(paste0("max_raster_", year), max_raster)
}
setwd("~/Corsica deer/corsica_deer_ABM/Manuscript/Tables and figures")
years <- c(2020, 2025, 2030, 2035, 2040)
measure <-  "extent"   #"extent" "cumulative_visits"
for (year in years) {
test_rasters <- rasters_by_year[[as.character(year)]]
for (i in 1:length(test_rasters)) {
if (i == 1) { min_raster <- test_rasters[[i]] }
if (i == 1) { max_raster <- test_rasters[[i]] }
if (i == 1) { max_raster_value <- max(test_rasters[[i]]) }
if (measure == "extent") {
#minimum extent
if ( global(test_rasters[[i]] > 0, "sum", na.rm = TRUE) < global(min_raster > 0, "sum", na.rm = TRUE) ) {
min_raster <- test_rasters[[i]]
#print("min raster updated")
}
#maximum extent
if ( global(test_rasters[[i]] > 0, "sum", na.rm = TRUE) > global(max_raster > 0, "sum", na.rm = TRUE) ) {
max_raster <- test_rasters[[i]]
#print("max raster updated")
}
}
if (measure == "cumulative_visits") {
print(max(values(test_rasters[[i]]))) # Sense check for me
#minimum visits
if ( global(test_rasters[[i]], "sum", na.rm = TRUE) < global(min_raster, "sum", na.rm = TRUE) ) {
min_raster <- test_rasters[[i]]
#print("min raster updated")
}
#maximum visits
if ( global(test_rasters[[i]], "sum", na.rm = TRUE) > global(max_raster, "sum", na.rm = TRUE) ) {
max_raster <- test_rasters[[i]]
print(max(values(test_rasters[[i]]))) # Sense check for me
#print("max raster updated")
}
}
}
assign(paste0("min_raster_", year), min_raster)
assign(paste0("max_raster_", year), max_raster)
}
library(viridis)
# ID max values for colouring
max_vals <- values(max_raster_2040, na.rm = TRUE)
max_vals <- max_vals[!is.na(max_vals) & max_vals != 0]
min_vals <- values(min_raster_2040, na.rm = TRUE)
min_vals <- min_vals[!is.na(min_vals) & min_vals != 0]
lower_q_max <- quantile(max_vals, prob = 0.25)
lower_q_min <- quantile(min_vals, prob = 0.25)
median_q_max <- quantile(max_vals, prob = 0.5)
median_q_min <- quantile(min_vals, prob = 0.5)
upper_q_max <- quantile(max_vals, prob = 0.75)
upper_q_min <- quantile(min_vals, prob = 0.75)
max_max <- max(values(max_raster_2040))
max_min <- max(values(min_raster_2040))
breaks_max <- c(0, 0.1, lower_q_max, median_q_max, upper_q_max, max_max)
breaks_min <- c(0, 0.1, lower_q_min, median_q_min, upper_q_min, max_min)
colours <- c("white", viridis(length(breaks_max) - 2))
max_legend_labels <- c(
"0 visits",
paste0("0 - ", round(lower_q_max)),
paste0(round(lower_q_max), " - ", round(median_q_max)),
paste0(round(median_q_max), " - ", round(upper_q_max)),
paste0(round(upper_q_max), " - ", round(max_max))
)
min_legend_labels <- c(
"0 visits",
paste0("0 - ", round(lower_q_min)),
paste0(round(lower_q_min), " - ", round(median_q_min)),
paste0(round(median_q_min), " - ", round(upper_q_min)),
paste0(round(upper_q_min), " - ", round(max_min))
)
png(filename = "min_max_maps.png", width = 30000, height = 17500, res = 1000)
# Define layout: 2 rows x 6 columns (1 legend + 5 maps)
layout_matrix <- matrix(c(
1, 2, 3, 4, 5, 6,
7, 8, 9, 10, 11, 12
), nrow = 2, byrow = TRUE)
# Set relative widths: wider first column for legends
layout(layout_matrix,
widths = c(2, rep(2, 5)),
#heights = c(1, rep(2, 5))
)# Legend column is wider
# Remove all margins
par(mar = c(0, 0, 0, 0), oma = c(0, 0, 0, 0))
# First row: max maps
# First column: legend
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", xlim = c(0, 1), ylim = c(0, 1))
legend("center",
legend = max_legend_labels,
fill = colours,
title = "Cumulative visit frequency\nMax",
cex = 3,
bty = "n")
# Columns 2-6: max maps for each year
for (year in years) {
plot(get(paste0("max_raster_", year)),
main = paste(year),
cex.main = 2.5,
col = colours,
range = c(0, max_max),
breaks = breaks_max,
legend = FALSE,
asp = NA,
axes = F)
plot(outline, add = TRUE)
}
# Second row: min maps
# First column: legend
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", xlim = c(0, 1), ylim = c(0, 1))
legend("center",
legend = min_legend_labels,
fill = colours,
title = "Cumulative visit frequency\nMin",
cex = 3,
bty = "n")
# Columns 2-6: min maps for each year
for (year in years) {
plot(get(paste0("min_raster_", year)),
#main = paste0(year),
cex.main = 2.5,
col = colours,
range = c(0, max_min),
breaks = breaks_min,
legend = FALSE,
asp = NA,
axes = F)
plot(outline, add = TRUE)
}
dev.off()
