min_deer <- c(0)
median_mature <- c(0)
max_mature <- c(0)
min_mature <- c(0)
# File list to be loaded
files <- list.files(path = "C:/Users/conno/Documents/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/results_final", pattern = "measures_")
# Loading in all the measures files and joining them together
for (i in 1:length(files)) {
if (i == 1) {
data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/results_final/", files[i]), header = F)
data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- data[1,]
row.names(deer) <- NULL
mature_deer <- data[2,]
row.names(mature_deer) <- NULL
immature_deer <- data[3,]
row.names(immature_deer) <- NULL
visited_patches <- data[4,]
row.names(visited_patches) <- NULL
} else {
additional_data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/results_final/", files[i]), header = F)
additional_data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(additional_data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(additional_data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- rbind(deer, additional_data[1,])
row.names(deer) <- NULL
mature_deer <- rbind(mature_deer, additional_data[2,])
row.names(mature_deer) <- NULL
immature_deer <- rbind(immature_deer, additional_data[3,])
row.names(immature_deer) <- NULL
visited_patches <- rbind(visited_patches, additional_data[4,])
row.names(visited_patches) <- NULL
}
}
# File list to be loaded
files <- list.files(path = "C:/Users/conno/Documents/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 6 - bestmodel1&dist2release/results", pattern = "measures_")
# Loading in all the measures files and joining them together
for (i in 1:length(files)) {
if (i == 1) {
data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/results_final/", files[i]), header = F)
data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- data[1,]
row.names(deer) <- NULL
mature_deer <- data[2,]
row.names(mature_deer) <- NULL
immature_deer <- data[3,]
row.names(immature_deer) <- NULL
visited_patches <- data[4,]
row.names(visited_patches) <- NULL
} else {
additional_data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/results_final/", files[i]), header = F)
additional_data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(additional_data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(additional_data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- rbind(deer, additional_data[1,])
row.names(deer) <- NULL
mature_deer <- rbind(mature_deer, additional_data[2,])
row.names(mature_deer) <- NULL
immature_deer <- rbind(immature_deer, additional_data[3,])
row.names(immature_deer) <- NULL
visited_patches <- rbind(visited_patches, additional_data[4,])
row.names(visited_patches) <- NULL
}
}
# File list to be loaded
files <- list.files(path = "C:/Users/conno/Documents/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 6 - bestmodel1&dist2release/results", pattern = "measures_")
# Loading in all the measures files and joining them together
for (i in 1:length(files)) {
if (i == 1) {
data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/results_final/", files[i]), header = F)
data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- data[1,]
row.names(deer) <- NULL
mature_deer <- data[2,]
row.names(mature_deer) <- NULL
immature_deer <- data[3,]
row.names(immature_deer) <- NULL
visited_patches <- data[4,]
row.names(visited_patches) <- NULL
} else {
additional_data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/results_final/", files[i]), header = F)
additional_data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(additional_data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(additional_data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- rbind(deer, additional_data[1,])
row.names(deer) <- NULL
mature_deer <- rbind(mature_deer, additional_data[2,])
row.names(mature_deer) <- NULL
immature_deer <- rbind(immature_deer, additional_data[3,])
row.names(immature_deer) <- NULL
visited_patches <- rbind(visited_patches, additional_data[4,])
row.names(visited_patches) <- NULL
}
}
# File list to be loaded
files <- list.files(path = "C:/Users/conno/Documents/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 6 - bestmodel1&dist2release/results/", pattern = "measures_")
# Loading in all the measures files and joining them together
for (i in 1:length(files)) {
if (i == 1) {
data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 6 - bestmodel1&dist2release/results/", files[i]), header = F)
data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- data[1,]
row.names(deer) <- NULL
mature_deer <- data[2,]
row.names(mature_deer) <- NULL
immature_deer <- data[3,]
row.names(immature_deer) <- NULL
visited_patches <- data[4,]
row.names(visited_patches) <- NULL
} else {
additional_data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 4 - death/results_final/", files[i]), header = F)
additional_data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(additional_data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(additional_data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- rbind(deer, additional_data[1,])
row.names(deer) <- NULL
mature_deer <- rbind(mature_deer, additional_data[2,])
row.names(mature_deer) <- NULL
immature_deer <- rbind(immature_deer, additional_data[3,])
row.names(immature_deer) <- NULL
visited_patches <- rbind(visited_patches, additional_data[4,])
row.names(visited_patches) <- NULL
}
}
# File list to be loaded
files <- list.files(path = "C:/Users/conno/Documents/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 6 - bestmodel1&dist2release/results/", pattern = "measures_")
# Loading in all the measures files and joining them together
for (i in 1:length(files)) {
if (i == 1) {
data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 6 - bestmodel1&dist2release/results/", files[i]), header = F)
data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- data[1,]
row.names(deer) <- NULL
mature_deer <- data[2,]
row.names(mature_deer) <- NULL
immature_deer <- data[3,]
row.names(immature_deer) <- NULL
visited_patches <- data[4,]
row.names(visited_patches) <- NULL
} else {
additional_data <- read.csv(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 6 - bestmodel1&dist2release/results/", files[i]), header = F)
additional_data$sim_id <- sub("measures_", "", sub(".csv", "", files[i]))
colnames(additional_data) <- c("2020", "2025", "2030", "2035", "2040", "sim_id")
row.names(additional_data) <- c("deer", "mature_deer", "immature_deer", "visited_patches")
deer <- rbind(deer, additional_data[1,])
row.names(deer) <- NULL
mature_deer <- rbind(mature_deer, additional_data[2,])
row.names(mature_deer) <- NULL
immature_deer <- rbind(immature_deer, additional_data[3,])
row.names(immature_deer) <- NULL
visited_patches <- rbind(visited_patches, additional_data[4,])
row.names(visited_patches) <- NULL
}
}
sample_number <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100) # Number of simulations to be sampled (with replacement)
repeat_number <- 1000 # How many times to repeat this sampling
median_deer <- c(0)
max_deer <- c(0)
min_deer <- c(0)
median_mature <- c(0)
max_mature <- c(0)
min_mature <- c(0)
median_immature <- c(0)
max_immature <- c(0)
min_immature <- c(0)
median_patches <- c(0)
max_patches <- c(0)
min_patches <- c(0)
set.seed(1) # Setting random seed
for (s in sample_number) {
for (r in 1:repeat_number) { # For each repeat number
# Sample with replacement from the deer, mature deer, immature deer, and patch datasets
deer_sample <- deer[sample(nrow(deer), s, replace = T), ][, 5] # samples simulations from total deer, mature deer etc dataframes, then only uses 2040
mature_sample <- mature_deer[sample(nrow(mature_deer), s, replace = T), ][, 5]
immature_sample <- immature_deer[sample(nrow(immature_deer), s, replace = T), ][, 5]
patches_sample <- visited_patches[sample(nrow(visited_patches), s, replace = T), ][, 5]
# Create the bootstrapped datasets
if (r == 1) {
# calculates the mean of those samples for total deer, mature deer etc at year 2040 (most variation expected here)
deer_sample_means <- mean(deer_sample)
mature_sample_means <- mean(mature_sample)
immature_sample_means <- mean(immature_sample)
patches_sample_means <- mean(patches_sample)
} else {
# calculates the mean of that sample for total deer, mature deer etc at year 2040 (most variation expected here) and adds to sample dataframe
deer_sample_means <- c(deer_sample_means, mean(deer_sample))
mature_sample_means <- c(mature_sample_means, mean(mature_sample))
immature_sample_means <- c(immature_sample_means, mean(immature_sample))
patches_sample_means <- c(patches_sample_means, mean(patches_sample))
}
}
# Joinging all these sample means together
sample_means <- as.data.frame(t(rbind(deer_sample_means, mature_sample_means, immature_sample_means, patches_sample_means))) # Sticks them together
#Calculating summary statistics
median_deer <- c(median_deer, median(sample_means$deer_sample_means))
max_deer <- c(max_deer, max(sample_means$deer_sample_means))
min_deer <- c(min_deer, min(sample_means$deer_sample_means))
median_mature <- c(median_mature, median(sample_means$mature_sample_means))
max_mature <- c(max_mature, max(sample_means$mature_sample_means))
min_mature <- c(min_mature, min(sample_means$mature_sample_means))
median_immature <- c(median_immature, median(sample_means$immature_sample_means))
max_immature <- c(max_immature, max(sample_means$immature_sample_means))
min_immature <- c(min_immature, min(sample_means$immature_sample_means))
median_patches <- c(median_patches, median(sample_means$patches_sample_means))
max_patches <- c(max_patches, max(sample_means$patches_sample_means))
min_patches <- c(min_patches, min(sample_means$patches_sample_means))
}
samples <- rbind(median_deer, max_deer, min_deer,
median_mature, max_mature, min_mature,
median_immature, max_immature, min_immature,
median_patches, max_patches, min_patches
)
samples <- samples[,-1]
colnames(samples) <- c("10", "20", "30", "40", "50", "60", "70", "80", "90", "100")
deer_numbers_samples <- as.data.frame(samples[1:9,])
deer_numbers_samples <- tibble::rownames_to_column(deer_numbers_samples, "type")
library(tidyr)
deer_numbers_samples <- gather(deer_numbers_samples, number_of_samples, numbers, 2:11)
deer_numbers_samples <- deer_numbers_samples[order(deer_numbers_samples$type),]
# Split 'type' into 'stat' (mean or sd) and 'category'(deer, immature etc)
deer_numbers_samples <- separate(deer_numbers_samples, type, into = c("stat", "category"),
sep = "_", extra = "merge")
# Reshape so that each row has year, category, mean and sd
deer_numbers_samples <- pivot_wider(deer_numbers_samples, names_from = stat, values_from = numbers)
deer_numbers_samples$median <- as.numeric(deer_numbers_samples$median)
deer_numbers_samples$max <- as.numeric(deer_numbers_samples$max)
deer_numbers_samples$min <- as.numeric(deer_numbers_samples$min)
deer_numbers_samples$number_of_samples <- as.numeric(deer_numbers_samples$number_of_samples)
#Medians and range
library(ggplot2)
a <- ggplot(deer_numbers_samples, aes(x = number_of_samples, y = median, color = category)) +
geom_line(linetype = "dashed", aes(group = category)) +
geom_point() +
geom_errorbar(aes(ymin = min, ymax = max), width = 0.5) +
theme_classic() +
labs(y = "Mean number of deer\nMedian", x = "Number of simulations", title = "A") +
scale_color_manual(
values = c("deer" = "black", "immature" = "blue", "mature" = "green"),
labels = c("deer" = "Total deer", "immature" = "Immature deer", "mature" = "Mature deer"),
name = NULL
) +
theme(legend.position = "none")
#Just ranges
b <- ggplot(deer_numbers_samples, aes(x = number_of_samples, y = max-min, color = category)) +
geom_line(linetype = "dashed", aes(group = category)) +
geom_point() +
theme_classic() +
labs(y = "Mean number of deer\nRange", x = "Number of simulations", title = "B") +
scale_color_manual(
values = c("deer" = "black", "immature" = "blue", "mature" = "green"),
labels = c("deer" = "Total deer", "immature" = "Immature deer", "mature" = "Mature deer"),
name = NULL
)
patches_samples <- as.data.frame(samples[10:12,])
patches_samples <- tibble::rownames_to_column(patches_samples, "type")
library(tidyr)
patches_samples <- gather(patches_samples, number_of_samples, numbers, 2:11)
patches_samples <- patches_samples[order(patches_samples$type),]
# Split 'type' into 'stat' (mean or sd) and 'category'(deer, immature etc)
patches_samples <- separate(patches_samples, type, into = c("stat", "category"),
sep = "_", extra = "merge")
# Reshape so that each row has year, category, mean and sd
patches_samples <- pivot_wider(patches_samples, names_from = stat, values_from = numbers)
patches_samples$median <- as.numeric(patches_samples$median)
patches_samples$max <- as.numeric(patches_samples$max)
patches_samples$min <- as.numeric(patches_samples$min)
patches_samples$number_of_samples <- as.numeric(patches_samples$number_of_samples)
#Medians and range
library(ggplot2)
c <- ggplot(patches_samples, aes(x = number_of_samples, y = median)) +
geom_line(linetype = "dashed", aes(group = category)) +
geom_point() +
geom_errorbar(aes(ymin = min, ymax = max), width = 0.5) +
theme_classic() +
labs(y = "Mean number of visited patches\nMedian", x = "Number of simulations", title = "C")
#Just ranges
d <- ggplot(patches_samples, aes(x = number_of_samples, y = max-min)) +
geom_line(linetype = "dashed", aes(group = category)) +
geom_point() +
theme_classic() +
labs(y = "Mean number of visited patches\nRange", x = "Number of simulations", title = "D")
library(patchwork)
(a | b) / (c | d) + plot_layout(nrow = 2)
ggsave(filename = "~/Corsica deer/corsica_deer_ABM/Manuscript/Tables and figures/bootstrapping.png",
dpi = 1000, units = "in")
ggsave(filename = "~/Corsica deer/Manuscript/Tables and figures/bootstrapping.png",
dpi = 1000, units = "in")
library(patchwork)
(a | b) / (c | d) + plot_layout(nrow = 2)
ggsave(filename = "~/Corsica deer/Manuscript/Tables and figures/bootstrapping.png",
dpi = 1000, units = "in")
library(terra)
library(viridis)
## Aligning with roads
outline <- vect("~/Corsica deer/corsica_deer_ABM/GIS/Administrative boundaries/corsica_outline.shp")
setwd(paste0("~/Corsica deer/corsica_deer_ABM/Modelling/NetLogo/Model 6 - bestmodel1&dist2release/output_maps/"))
# Two functions for loading the raster maps: either by year or by simulation ID
load_asc_files_by_year <- function() {
# Mapping from model years to calendar years
year_map <- c("3654" = 2020,
"7306" = 2025,
"10958" = 2030,
"14610" = 2035,
"18264" = 2040)
# List all .asc files
asc_files <- list.files(pattern = "\\.asc$", full.names = TRUE)
# Load each file into a SpatRaster
rasters <- lapply(asc_files, function(f) {
r <- rast(f) # Load the raster
r <- shift(r, dx = 0.000381, dy = 0.0002)
names(r) <- tools::file_path_sans_ext(basename(f)) # Name the raster after the file
r
})
# Extract year from filenames
years <- sapply(asc_files, function(f) {
parts <- strsplit(basename(f), "_")[[1]] # Extracts the final part of the file name, and splits by "_"
model_year <- tools::file_path_sans_ext(parts[length(parts)]) #takes the last part
calendar_year <- year_map[model_year] # Converts it to a calander year
as.integer(calendar_year) # Converts to an interger
})
# Organize rasters into a list by year
rasters_by_year <- split(rasters, years) # Creates list where entries are grouped by calander year
return(rasters_by_year) # Returns a list
}
rasters_by_year <- load_asc_files_by_year() # Loads all rasters in wd and groups by year
### Getting the visit map ready to plot ----------
mean_2040 <- sds(rasters_by_year$`2040`)
mean_2040 <- app(mean_2040, mean)
mean_vals <- values(mean_2040, na.rm = TRUE) # taking n-visit values from mean map and 1) removing NAs and 2) removing 0s
mean_vals <- mean_vals[!is.na(mean_vals) & mean_vals != 0]
lower_q_mean <- quantile(mean_vals, prob = 0.25) # lower quantile
median_q_mean <- quantile(mean_vals, prob = 0.5) # median
upper_q_mean <- quantile(mean_vals, prob = 0.75) # upper quantile
max_mean <- minmax(mean_2040)[2] # max values as [2] = max
breaks_mean <- c(0, 0.1, lower_q_mean, median_q_mean, upper_q_mean, max_mean) # setting up color breaks by quantiles
colours <- c("white", viridis(length(breaks_mean) - 2)) # colour scheme
mean_legend_labels <- c( # manually setting labels for mean values
"0 visits",
paste0("0 - ", round(lower_q_mean)),
paste0(round(lower_q_mean), " - ", round(median_q_mean)),
paste0(round(median_q_mean), " - ", round(upper_q_mean)),
paste0(round(upper_q_mean), " - ", round(max_mean))
)
### Identify roads -------------------------
roads_dist <- rast("../distance.asc")
roads <- roads_dist < 100 # Distances are in 100s of meters, thus less than 1 cell away
# First convert the binary raster to polygons (lines will follow from edges of polygons)
roads <- as.polygons(roads, dissolve = TRUE)
# Convert polygons to lines
roads <- as.lines(roads)
### plot ---------------------
plot(outline, legend = F)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
legend("topleft", # Manually create legend
legend = mean_legend_labels,
fill = colours,
title = "Mean cumulative visit frequency",
cex = 0.8,
bty = "n")
lines(roads, col = "red", lwd = 2)
lines(as.lines(outline))
View(roads_dist)
roads_dist <- rast("../distance.asc")
roads <- roads_dist < 100 & roads_dist > 0 # Distances are in 100s of meters, thus less than 1 cell away
# First convert the binary raster to polygons (lines will follow from edges of polygons)
roads <- as.polygons(roads, dissolve = TRUE)
# Convert polygons to lines
roads <- as.lines(roads)
### plot ---------------------
plot(outline, legend = F)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
legend("topleft", # Manually create legend
legend = mean_legend_labels,
fill = colours,
title = "Mean cumulative visit frequency",
cex = 0.8,
bty = "n")
lines(roads, col = "red", lwd = 2)
### plot ---------------------
plot(outline, legend = F)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
### plot ---------------------
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
legend("topleft", # Manually create legend
legend = mean_legend_labels,
fill = colours,
title = "Mean cumulative visit frequency",
cex = 0.8,
bty = "n")
lines(roads, col = "red", lwd = 1)
lines(as.lines(outline))
png(filename = "roads_and_deer.png", res = 1000)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
png(filename = "roads_and_deer.png", res = 1000)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
plot.new()
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
png(filename = "roads_and_deer.png", res = 800)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
plot(1, type = "n", xlim = c(xmin, xmax), ylim = c(ymin, ymax), xlab = "", ylab = "", axes = FALSE)
png(filename = "roads_and_deer.png", res = 800)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
png(filename = "roads_and_deer.png", res = 600)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png(filename = "roads_and_deer.png", res = 600)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
dev.off()
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
plot.new
png(filename = "roads_and_deer.png", res = 600)
plot(mean_2040, # plot mean map
cex.main = 0.5,
col = colours, # pre-established colours
range = c(0, max_mean), # pre-established range
breaks = breaks_mean, # pre-established breaks
legend = FALSE,
add = TRUE) # legend to be added manually
